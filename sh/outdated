#!/bin/sh
# Check repository for outdated packages

die() {
    printf '%s\n' "$*" >&2
    exit 1
}

mkcd() {
    mkdir -p "$1" && cd "$1"
}

repology_name() {
    # Fix any known naming inconsistences between packages and Repology.
    remote=$(
        # Strip unrelated suffixes.
        remote=${1%%-bin}
        remote=${remote%%-git}

        # Remote names are all lowercase.
        tr '[:upper:]' '[:lower:]' <<EOF |
$remote
EOF
        # Remote always uses -.
        tr _ -
    )

    case $remote in
        cairo)
            remote=cairo-graphics-library
        ;;
        
        liberation-fonts)
            remote=fonts:liberation
        ;;

        libjpeg)
            remote=ijg-libjpeg
        ;;

        libmupdf | libxaw3d)
            # TODO [community]: Rename packages?
            remote=${remote##lib}
        ;;

        linux-headers)
            remote=linux
        ;;

        lpeg)
            remote=lua:lpeg
        ;;

        samurai)
            remote=samurai-build-tool
        ;;
        
        sshfs)
            remote=fusefs:sshfs
        ;;
        
        surf)
            remote=surf-browser
        ;;

        st)
            remote=st-term
        ;;

        terminus-font)
            remote=fonts:terminus
        ;;

        vis)
            remote=vis-editor
        ;;

        webkit2gtk)
            # TODO [community]: Rename package?
            remote=webkitgtk
        ;;

        tz)
        	remote=tzdata
        ;;

        libpkgconf)
        	remote=pkgconf
        ;;

    esac
}

repology_version() {
    [ -f "$1.svg" ] || return 1
    read -r remote_ver < "$1.svg" || :
    remote_ver=${remote_ver%</text>*}
    remote_ver=${remote_ver##*>}
}

repo_version() {
    read -r ver _ 2>/dev/null < "$2/ver" || {
        printf '%-30s local version not found\n' "$1" >&2
        return 1
    }

    [ "$ver" != git ]
}

get_outdated() {
    repo=${PWD%%/}
    printf '\n[Checking Repology for outdated packages in %s]\n\n' "$repo" >&2

    for pkg in */; do
        pkg=${pkg%%/}
        repology_name "${pkg##*/}"

        [ "$remote" = - ] ||
            set -- "$@" -z "$remote.svg" \
                "https://repology.org/badge/latest-versions/$remote.svg"
    done

    mkcd "$tmp/${repo##*/}"

    curl -SsZA 'kiss-outdated' --parallel-max 16 --remote-name-all "$@" ||
        die 'fatal: network error'

    for _pkg in "$OLDPWD"/*/; do
        pkg=${_pkg%%/}
        pkg=${pkg##*/}

        repo_version  "$pkg" "$_pkg" || continue
        repology_name "$pkg"
        repology_version "$remote" || continue

        case $remote_ver in
            *", $ver"* | *"$ver,"* | "$ver" | '') continue ;;
            -) printf '%-30s no remote version found\n' "$pkg" >&2; continue ;;
        esac

        printf '%-30s %s -> %s\n' "$pkg" "$ver" "$remote_ver"
    done
}

main() {
    set -e

    [ "$1" ] || set -- "$PWD"

    mkdir -p "${tmp:=${XDG_CACHE_HOME:-"$HOME/.cache"}/kiss/repology}"

    for repo do
        old_pwd=$PWD
        cd "$repo"
        get_outdated
        cd "$old_pwd"
    done
}

main "$@"
